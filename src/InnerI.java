// // 1.	–°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å Pair<T, V>, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ –∑–Ω–∞—á–µ–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤.
// // 	2.	–†–µ–∞–ª–∏–∑—É–π—Ç–µ –≤ Pair<T, V>:
// // 	‚Ä¢	–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–Ω–∞—á–µ–Ω–∏–π.
// // 	‚Ä¢	–ì–µ—Ç—Ç–µ—Ä—ã getFirst() –∏ getSecond().
// // 	‚Ä¢	–ú–µ—Ç–æ–¥ swap(), –∫–æ—Ç–æ—Ä—ã–π –º–µ–Ω—è–µ—Ç –º–µ—Å—Ç–∞–º–∏ T –∏ V.
// class Generics <T,V> {
//     T first;
//     V second;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.util.*;
import java.io.IOException;
import java.io.OutputStream;
import java.util.ArrayList;

//     public Generics(T first, V second){
//         this.first = first;
//         this.second = second;
//     }

//     public T getFirst(){
//         return first;
//     }

//     public V getSecond(){
//         return second;
//     }


// }

// public class Innergenerics {
//     public static void main(String[] args) {
//         Generics<Integer, Integer> g = new Generics<>(12,34);
//         System.out.println(g.getFirst());
//     }
// }




//Box<Integer> box1 = new Box<>(10);
//Box<Integer> box2 = new Box<>(10);
//System.out.println(box1.isEqual(box2));




// public class Innergenerics <T> {
//     private T thing;
//     public Innergenerics(T thing){
//         this.thing = thing;
//     }
//     public T getThing(){
//         return thing;
//     }

//     public boolean comparethings(T thing, T second){
//         return second.equals(thing);
//     }
// }

// class Mainb{
//     public static void main(String[] args) {
//         Innergenerics<String> in = new Innergenerics<>("Yntymak");
//         Innergenerics<String> inn = new Innergenerics<>("Yntymak");
//         System.out.println(in.getThing());
//         System.out.println(inn.comparethings(in.getThing(), inn.getThing()));
//     }
// }


// –¶–µ–ª—å:

// –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å Storage<T>, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç:
// 	1.	–•—Ä–∞–Ω–∏—Ç—å –æ–±—ä–µ–∫—Ç—ã —Ç–∏–ø–∞ T –≤ List<T>.
// 	2.	–î–æ–±–∞–≤–ª—è—Ç—å (addItem()) –∏ —É–¥–∞–ª—è—Ç—å (removeItem()) —ç–ª–µ–º–µ–Ω—Ç—ã.
// 	3.	–ù–∞—Ö–æ–¥–∏—Ç—å (findItem()) —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ –ø—Ä–µ–¥–∏–∫–∞—Ç—É (Predicate<T>).
// 	4.	–ü–æ–ª—É—á–∞—Ç—å –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã (getAll()).

// import java.util.ArrayList;

// class Storage7<T>{
//     public Storage7(){};
//     List<T> arr = new ArrayList<>();


//     void addItem(T thing){
//         arr.add(thing);
//     }

//     void removeItem(T thing){
//         arr.remove(thing);
//     }

//     List<T> getAll(){
//         return arr;
//     }

// }

// class muin{
//     public static void main(String[] args) {
//         Storage7<String> st = new Storage7<>();
//         st.addItem("null");
//         st.addItem("Yntymak");
//         System.out.println(st.getAll());

//     }
// }




//  class I {
//     public static void main(String[] args) {
//         ArrayList<Integer> arr = new ArrayList<>();
//         arr.add(100);
//         arr.add(2);
//         arr.add(3);
//         arr.add(9);
//         arr.add(5);
//         int max = Collections.max(arr);
//         //System.out.println(max);
//         //Collections.sort(arr);
//         System.out.println(arr);
        
//         int sum =0;
//         for(int i:arr){
//             sum+=i;
//         }
//         //System.out.println(sum);

//         List<String> arsr = new ArrayList<>(Arrays.asList("Yntymak", "asdf"));
//         Qwe<String> af = new Qwe(arsr);
//         //System.out.println(af.getLast());
        
//     }
// }


// class Qwe<T>{
//     List<T> arr;
//     public Qwe(List<T> arr){
//         this.arr = arr;
//     };
//     public T getLast(){
//         return arr.get(arr.size()-1);
//     }
// }

// class Karte{
//     public static void main(String[] args) {
//         Map<Integer,Integer> map = new TreeMap<>();
//         ArrayList<Integer> arrrrr = new ArrayList<>(Arrays.asList(1,2,3,4,5,6,56,5,4,3,2,1,2));
//         for(int i: arrrrr){
//             map.put(i, map.getOrDefault(i, 0)+1);
            
//         }
        
//        System.out.println();
// }
// }


// –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
// 	1.	–°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å LimitedCache<K, V>, –∫–æ—Ç–æ—Ä—ã–π —Ö—Ä–∞–Ω–∏—Ç –Ω–µ –±–æ–ª–µ–µ N —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
// 	2.	–ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –±–æ–ª—å—à–µ N, —É–¥–∞–ª—è–µ—Ç—Å—è —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π.
// 	3.	–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ LinkedHashMap<K, V> –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–æ–Ω —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ—Ä—è–¥–æ–∫).
// 	4.	–†–µ–∞–ª–∏–∑—É–π—Ç–µ –º–µ—Ç–æ–¥—ã:
// 	‚Ä¢	void put(K key, V value) ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç.
// 	‚Ä¢	V get(K key) ‚Äî –ø–æ–ª—É—á–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç.
// 	‚Ä¢	boolean contains(K key) ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –∫–ª—é—á.
// 	‚Ä¢	int size() ‚Äî —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä.
// 	5.	–ö–ª–∞—Å—Å –¥–æ–ª–∂–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ª—é–±—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–ª—é—á–µ–π –∏ –∑–Ω–∞—á–µ–Ω–∏–π.



// –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å MyDeque<T>, —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π –¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω—é—é –æ—á–µ—Ä–µ–¥—å (Deque) —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é:
// 	‚Ä¢	–î–æ–±–∞–≤–ª—è—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –Ω–∞—á–∞–ª–æ –∏ –≤ –∫–æ–Ω–µ—Ü.
// 	‚Ä¢	–£–¥–∞–ª—è—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã —Å –Ω–∞—á–∞–ª–∞ –∏ —Å –∫–æ–Ω—Ü–∞.
// 	‚Ä¢	–ü–æ–ª—É—á–∞—Ç—å –ø–µ—Ä–≤—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç.
// 	‚Ä¢	–ü—Ä–æ–≤–µ—Ä—è—Ç—å, –ø—É—Å—Ç –ª–∏ Deque.

// ‚∏ª

// üéØ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
// 	1.	–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ LinkedList<T> –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
// 	2.	–†–µ–∞–ª–∏–∑—É–π—Ç–µ –º–µ—Ç–æ–¥—ã:
// 	‚Ä¢	void addFirst(T value) ‚Äì –¥–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –≤ –Ω–∞—á–∞–ª–æ.
// 	‚Ä¢	void addLast(T value) ‚Äì –¥–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ–Ω–µ—Ü.
// 	‚Ä¢	T removeFirst() ‚Äì —É–¥–∞–ª–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç.
// 	‚Ä¢	T removeLast() ‚Äì —É–¥–∞–ª–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç.
// 	‚Ä¢	T getFirst() ‚Äì –≤–µ—Ä–Ω—É—Ç—å –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è.
// 	‚Ä¢	T getLast() ‚Äì –≤–µ—Ä–Ω—É—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è.
// 	‚Ä¢	boolean isEmpty() ‚Äì –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø—É—Å—Ç –ª–∏ Deque.


// class MyDeque<T>{
//     Deque<T> arr;
//     public MyDeque(){
//         arr = new LinkedList<>();

//     };
//     void addFirst(T value){
//         arr.addFirst(value);
//     }

//     void addLast(T value){
//         arr.addLast(value);
//     }

//     void removeLast(T value){
//         arr.removeLast();

//     }

//     void removeFirst(T value){
//         arr.removeFirst();
//     }
//     boolean isEmpty(){
//         return arr.isEmpty();
//     }

// }


// public class InnerI {
//     public static void main(String[] args) {
//         MyDeque<String> arr = new MyDeque();
//         arr.addFirst("yntymak");
//     }

    
// }




// class Writer{
//     public static void main(String[] args) {
//         ArrayList<Integer> arr = new ArrayList<>(Arrays.asList(1,2,3,4,5,6,7,8));


//         try{
//             FileOutputStream fo = new FileOutputStream("akdk.txt");
//             BufferedOutputStream bo = new BufferedOutputStream(fo);

//                 for(int i:arr){
//                     bo.write(i);}
                
//             }catch (IOException e) {
//                 e.getMessage();      
//     }}}




// // class Reader{
// //     public static void main(String[] args) {
// //         try{
// //             FileInputStream fi = new FileInputStream("akk.data");
// //             BufferedInputStream bi = new BufferedInputStream(fi);
// //         int data;
// //         while ((data = bi.read())!= -1){
// //             System.out.println(data);
// //         }

        
// //     }catch(IOException e){
// //         System.out.println(e.getMessage());
// //     }
    
// // }
// // }



// class Abc{
//     Map<String, Integer> arr;
//     public Abc(){
//         arr = new HashMap<>();
//         arr.put("null", 3);
//         arr.put("Aibek", 4);
//         arr.put("Hello", 4);
//         arr.put("abk", 3);    
//     };   

//     void abcd(){
//         System.out.println(arr);
//     }


//     void abcdef(){
//         for(Map.Entry entry: arr.entrySet()){
//             System.out.println("key is:" + entry.getKey() + "value is: " + entry.getValue());
//     }
    
// }
// }


// class Mn{
//     public static void main(String[] args) {
//         Abc ab = new Abc();
//         ab.abcd();
//         ab.abcdef();
//     }
//  }

// // class Sorrr{
// //     public static void main(String[] args) {
// //         ArrayList<Integer> arr = new ArrayList<>(Arrays.asList(1,2,3,4,3,2,1));
// //         Collections.sort(arr);
// //         System.out.println(arr);
// //     }
// // }
// class Helllll{
//     ArrayList<Integer> ar;
//     public Helllll(){
//         ar = new ArrayList<>();
//         ar.add(4);
//         ar.add(9);
//         ar.add(0);
    
//         try{FileOutputStream os = new FileOutputStream("newFile.data");
//         for(int i:ar){
//             os.write(i);
//         }
//     }catch(IOException e){
//         System.out.println(e.getMessage());
//     }
//     }

// }



// –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å Triple<T, U, V>, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ç—Ä–∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤.

// –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
// 	1.	–†–µ–∞–ª–∏–∑—É–π—Ç–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–Ω–∞—á–µ–Ω–∏–π.
// 	2.	–†–µ–∞–ª–∏–∑—É–π—Ç–µ –≥–µ—Ç—Ç–µ—Ä—ã: getFirst(), getSecond(), getThird().
// 	3.	–†–µ–∞–ª–∏–∑—É–π—Ç–µ –º–µ—Ç–æ–¥ swap(), –∫–æ—Ç–æ—Ä—ã–π –º–µ–Ω—è–µ—Ç –º–µ—Å—Ç–∞–º–∏ T –∏ V.
// 	4.	–†–µ–∞–ª–∏–∑—É–π—Ç–µ –º–µ—Ç–æ–¥ toString() –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞.
// 	5.	–°–æ–∑–¥–∞–π—Ç–µ main() –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏.


// class Triple <T, V, U>{
//     T first;
//     V second;
//     U third;
//    public Triple(T first, V second, U third){
//         this.first = first;
//         this.second = second;
//         this.third = third;
//    }

  
// }




// import java.util.*;

// class Two {
//     HashMap<String, Integer> dic;

//     public Two() {
//         dic = new HashMap<>();
//         dic.put("hello", 3);
//         dic.put("world", 6);

//         for (Map.Entry<String, Integer> entry : dic.entrySet()) {
//             System.out.println(entry.getKey() + " -> " + entry.getValue());
//         }
//     }

//     public static void main(String[] args) {
//         new Two(); // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
//     }
// }